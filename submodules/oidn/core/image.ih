// Copyright 2009-2020 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "vec.ih"

struct Image
{
  uniform uint8* uniform ptr;
  uniform size_t bytePixelStride; // pixel stride in number of *bytes*
  uniform size_t rowStride;       // row stride in number of *pixel strides*
};

inline size_t getOffset(const uniform Image& img, uniform int h, int w)
{
  return (((size_t)h * img.rowStride + (size_t)w) * img.bytePixelStride);
}

inline float get1f(const uniform Image& img, size_t offset)
{
  return *((uniform float*)&img.ptr[offset]);
}

inline void set1f(const uniform Image& img, size_t offset, float value)
{
  *((uniform float*)&img.ptr[offset]) = value;
}

inline vec3f get3f(const uniform Image& img, uniform int h, int w)
{
  const size_t offset = getOffset(img, h, w);
  return make_vec3f(get1f(img, offset),
                    get1f(img, offset + 4),
                    get1f(img, offset + 8));
}

inline void set3f(const uniform Image& img, uniform int h, int w, const vec3f& value)
{
  const size_t offset = getOffset(img, h, w);
  set1f(img, offset,     value.x);
  set1f(img, offset + 4, value.y);
  set1f(img, offset + 8, value.z);
}
