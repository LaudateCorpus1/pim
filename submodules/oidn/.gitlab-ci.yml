## Copyright 2009-2020 Intel Corporation
## SPDX-License-Identifier: Apache-2.0

stages:
  - build
  - package
  - scan_source

.base:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    OIDN_ROOT_DIR:          "$CI_PROJECT_DIR"
    PYTHONUNBUFFERED:       1

.build:
  stage: build
  only:
    - pushes
    - schedules
    - web
  artifacts:
    untracked: true
    name:      "$CI_JOB_NAME"
    when:      always
    expire_in: 1d

.package:
  stage:  package
  script: scripts/release.py package
  only:
    - schedules
    - web
  artifacts:
    paths:
      - build_release/*.tar.gz
      - build_release/*.zip
    name:      "$CI_JOB_NAME"
    expire_in: 1d

## -----------------------------------------------------------------------------
## Linux
## -----------------------------------------------------------------------------
 
.base-linux:
  extends: .base
  tags:
    - docker

.build-linux:
  extends:
    - .build
    - .base-linux

.package-linux:
  extends:
    - .package
    - .base-linux

## -----------------------------------------------------------------------------

.centos7:
  image: openimagedenoise/build:centos7
  
build-centos7-icc:
  extends:
    - .build-linux
    - .centos7
  script: scripts/release.py build --compiler icc

package-linux:
  extends:
    - .package-linux
    - .centos7
  needs: 
    - job: build-centos7-icc
      artifacts: true

## -----------------------------------------------------------------------------

.ubuntu18.04:
  image: openimagedenoise/build:ubuntu18.04

build-ubuntu18.04-gcc:
  extends:
    - .build-linux
    - .ubuntu18.04
  script: scripts/release.py build --compiler gcc

build-ubuntu18.04-gcc-debug:
  extends:
    - .build-linux
    - .ubuntu18.04
  script: scripts/release.py build --compiler gcc --config Debug

build-ubuntu18.04-gcc-static:
  extends:
    - .build-linux
    - .ubuntu18.04
  script: scripts/release.py build --compiler gcc -D OIDN_STATIC_LIB=ON

build-ubuntu18.04-clang:
  extends:
    - .build-linux
    - .ubuntu18.04
  script: scripts/release.py build --compiler clang

build-ubuntu18.04-kw-gcc:
  extends:
    - .build-linux
    - .ubuntu18.04
  script: scripts/klocwork_build.sh

## -----------------------------------------------------------------------------

.ubuntu20.04:
  image: openimagedenoise/build:ubuntu20.04

build-ubuntu20.04-gcc:
  extends:
    - .build-linux
    - .ubuntu20.04
  script:
    - mkdir build
    - cd build
    - cmake .. -D OIDN_APPS_OPENIMAGEIO=ON
    - make -j VERBOSE=1

## -----------------------------------------------------------------------------
## macOS
## -----------------------------------------------------------------------------

.base-macos:
  extends: .base
  tags:
    - osx

.build-macos:
  extends:
    - .build
    - .base-macos

.package-macos:
  extends:
    - .package
    - .base-macos

## -----------------------------------------------------------------------------

build-macos-icc:
  extends: .build-macos
  script:  scripts/release.py build --compiler icc

build-macos-clang:
  extends: .build-macos
  script:  scripts/release.py build --compiler clang

build-macos-clang-static:
  extends: .build-macos
  script:  scripts/release.py build --compiler clang -D OIDN_STATIC_LIB=ON

package-macos:
  extends: .package-macos
  needs: 
    - job: build-macos-icc
      artifacts: true

## -----------------------------------------------------------------------------
## Windows
## -----------------------------------------------------------------------------

.base-windows:
  extends: .base
  tags:
    - win10
  variables:
    ErrorActionPreference: stop

.build-windows:
  extends:
    - .build
    - .base-windows

.package-windows:
  extends:
    - .package
    - .base-windows

## -----------------------------------------------------------------------------

build-windows-icc:
  extends: .build-windows
  tags:
    - msvc15
    - icc19
  script:  python scripts/release.py build --compiler msvc15-icc19

build-windows-msvc15:
  extends: .build-windows
  tags:
    - msvc15
  script:  python scripts/release.py build --compiler msvc15

build-windows-msvc15-debug:
  extends: .build-windows
  tags:
    - msvc15
  script:  python scripts/release.py build --compiler msvc15 --config Debug

build-windows-msvc15-static:
  extends: .build-windows
  tags:
    - msvc15
  script:  python scripts/release.py build --compiler msvc15 -D OIDN_STATIC_LIB=ON

build-windows-msvc16:
  extends: .build-windows
  tags:
    - msvc16
  script:  python scripts/release.py build --compiler msvc16

package-windows:
  extends: .package-windows
  tags:
    - msvc15
    - icc19
  needs:
    - job: build-windows-icc
      artifacts: true
      
## -----------------------------------------------------------------------------
## Protex
## -----------------------------------------------------------------------------

protex_scan:
  stage: scan_source
  tags:
    - docker
  only:
    - schedules
    - web
  script: scripts/protex_scan.sh
  image:  amd64/openjdk:8
  dependencies: []
  # Will fail regularly, do not break nightlies because of that.
  allow_failure: true
  artifacts:
    paths:     [ "$CI_PROJECT_DIR/ip_protex.log" ]
    name:      "$CI_JOB_NAME"
    when:      always
    expire_in: 7d
